name: CI/CD Pipeline - MyBank API

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: mybank-467102
  REGION: us-central1
  SERVICE_NAME: mybank-api
  IMAGE_NAME: gcr.io/mybank-467102/mybank-api

jobs:
  # Job de Build y Test
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run tests
      run: ./gradlew test
      
    - name: Build application
      run: ./gradlew build -x test
      
  # Job de Deploy (solo en main)
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build application
      run: ./gradlew build -x test
      
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
        
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker gcr.io
        gcloud config set project ${{ env.PROJECT_ID }}
      
    - name: Build and push Docker image
      run: |
        # Copiar el JAR al directorio raíz
        cp build/libs/mybank-api-0.1.0.jar app.jar
        
        # Construir imagen Docker
        docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} -f deployment/Dockerfile .
        docker build -t ${{ env.IMAGE_NAME }}:latest -f deployment/Dockerfile .
        
        # Push a GCR
        docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.IMAGE_NAME }}:latest
        
    - name: Deploy to Cloud Run
      run: |
        # Generar JWT secret
        JWT_SECRET=$(openssl rand -base64 64)
        
        # Desplegar a Cloud Run
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 10 \
          --set-env-vars="SPRING_PROFILES_ACTIVE=prod" \
          --set-env-vars="JWT_SECRET=$JWT_SECRET" \
          --set-env-vars="DB_NAME=mybank_db" \
          --set-env-vars="DB_USER=mybank_app" \
          --set-env-vars="DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
          --set-env-vars="DB_INSTANCE_CONNECTION_NAME=${{ env.PROJECT_ID }}:${{ env.REGION }}:mybank-postgres" \
          --add-cloudsql-instances="${{ env.PROJECT_ID }}:${{ env.REGION }}:mybank-postgres"
          
    - name: Get service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)")
        echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
        
    - name: Notify deployment success
      run: |
        echo "🎉 Deployment successful!"
        echo "🌐 Service URL: ${{ steps.get-url.outputs.service_url }}"
        echo "📚 Swagger UI: ${{ steps.get-url.outputs.service_url }}/swagger-ui.html"
        echo "🏥 Health Check: ${{ steps.get-url.outputs.service_url }}/health" 